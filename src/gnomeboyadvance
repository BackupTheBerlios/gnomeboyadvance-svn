#!/usr/bin/python
#authors cass@skynet.be, jay@socialistsoftware.com
#web http://developer.berlios.de/projects/gnomeboyadvance/
#license GPL http://www.gnu.org/copyleft/gpl.html

import os, sys
import string, re

try:
	import pygtk
	pygtk.require('2.0')
	import gtk, gtk.glade
	import gnome, gnome.ui, gobject
except:
	print 'You must have python-gtk2, python-gnome2 and python-glade2 installed.'
	sys.exit()

from Settings import Settings

NAME = 'gnomeBoyAdvance'
VERSION = '0.3'
AUTHORS = ['Jay Graves <jay@socialistsoftware.com>', 'Guillaume Desmottes <cass@skynet.be>', 'Olivier Le Thanh Duong <staz@perso.be>']
COMMENTS = 'A Gnome frontend for the Visual Boy Advance emulator'
COPYRIGHT = 'Jay Graves (c) 2003\n GnomeBoyAdvance Team (c) 2004'
DATADIR = '/usr/share/gnomeboyadvance'
SETTINGSFILE = os.path.join(os.path.expanduser("~"), ".gnomeBoyAdvance")
LOGOFILE = 'gnomeboyadvance.png'
ICONFILE = '/usr/share/pixmaps/gba48.png'

gnome.init('gnomeBoyAdvance', VERSION)
theGame = None


class gameList:
	def __init__(self):
		self.gameList = app.get_widget("gameList")
		self.gamesDict = []
		self.gameListModel = gtk.ListStore(gobject.TYPE_STRING)
		self.gameList.set_model(self.gameListModel)
		self.col = gtk.TreeViewColumn("Game",gtk.CellRendererText(),text=0)
		self.col.set_sort_column_id(0)
		self.gameList.append_column(self.col)
		self.selection = self.gameList.get_selection()
		self.selection.set_mode('single')
		self.selection.connect('changed',self.selectGame)

        def populate(self, romsDir, tosearch=''):
                if tosearch:
                       tosearch = tosearch.lower()

		self.gameListModel.clear()
		if os.path.isdir(romsDir):
			self.gamesDict = os.listdir(romsDir)
		else:
			print romsDir + ' is not a directory.'
		self.gameCount = 0
		for eachGame in self.gamesDict:
			if (eachGame[-3:] == 'zip' or eachGame[-3:] == 'gba') and (eachGame.lower().find(tosearch) != -1):
				iter = self.gameListModel.append()
				self.gameListModel.set_value(iter,0,eachGame)
				self.gameCount += 1
		app.get_widget('gameCount').set_text('Total roms : ' + `self.gameCount`)

	def selectGame(self,selection):
		self.sel = selection.get_selected()
		global theGame
		if self.sel:
			self.model, self.iter = self.sel
			if self.iter:
				self.module = self.model.get_value(self.iter, 0)
				theGame = self.model.get_value(self.iter,0)
			else:
				theGame = ''
		if mySettings.settings.has_key('captureDir') and os.path.isdir(mySettings.settings['captureDir']):
			theImage = os.path.join(mySettings.settings['captureDir'], theGame[:-4] + '01.png')
			gameImage = app.get_widget("gameImage")
			if os.path.isfile(theImage):
				gameImage.set_from_file(theImage)
			else:
				gameImage.set_from_file( os.path.join(DATADIR, LOGOFILE))
		app.appBar.set_status(theGame)
		


class GUI(gtk.glade.XML):
	def __init__(self):
		#little hack usefull for the developpement
		if os.path.isfile("./gnomeboyadvance.glade"): glade_f = './gnomeboyadvance.glade'
		else: glade_f = os.path.join(DATADIR, 'gnomeboyadvance.glade')

		gtk.glade.XML.__init__(self, glade_f)
                self.signal_autoconnect(dict(GUI.__dict__))
		self.appBar = self.get_widget('appbar1')

		if os.path.isfile(ICONFILE):
			#old version of python-gtk have not set_icon_from_file
			try:
				self.get_widget('main').set_icon_from_file(ICONFILE)
				self.get_widget('preferences_dialog').set_icon_from_file(ICONFILE)
			except AttributeError: pass
			

	def on_about1_activate(*args):
		pixbuf = gtk.gdk.pixbuf_new_from_file( os.path.join(DATADIR, LOGOFILE))
	        copyright = unicode(COPYRIGHT, "latin-1").encode("utf8")
	        gnome.ui.About(NAME, str(VERSION), copyright, COMMENTS, AUTHORS, logo_pixbuf=pixbuf).show()

	def on_quit1_activate(*args):
		gtk.main_quit()

	def on_playGame_clicked(*args):
		if os.access(mySettings.settings['binary'], os.X_OK ):
			if theGame:
				launch =  mySettings.settings['binary']
				launch += ' --config='+ mySettings.confFile()
				launch += ' "' + os.path.join(mySettings.settings['romsDir'],theGame) + '" &'
				
				print launch
				app.appBar.set_status('playing ' + theGame)
				os.system(launch)
			else : 
				app.appBar.set_status('No game selected')
		else :  # TODO: Replace that by a popup info
			app.appBar.set_status('Invalide path to VBA or not an executable, please fit it in preference')

	def on_reload_gamelist_activate(*args):
		theGameList.populate(mySettings.settings['romsDir'])
	
	def on_search_changed(*args):
		tosearch= app.get_widget('searchbox').get_text()
		theGameList.populate(mySettings.settings['romsDir'],tosearch)

	def on_preferences_activate(*args):
		app.get_widget("preferences_dialog").show()

	def on_preferences_close_button_clicked(*args):
		app.get_widget("preferences_dialog").hide()
		
		app.appBar.set_status('settings saved')


	def on_import_activate(*args):
		fs = gtk.FileSelection('Choose the file to import')
		result = fs.run()
		path = fs.get_filename()
		if result == gtk.RESPONSE_OK and os.path.isfile(path):
			mySettings.readFile(path)
		fs.hide()

	def on_export_activate(*args):
		fs = gtk.FileSelection('Choose the export directory')
		result = fs.run()
		if result == gtk.RESPONSE_OK: 
			path = fs.get_filename()
			if os.path.isdir(path): path = os.path.join(path, 'VisualBoyAdvance.cfg')
			mySettings.writeFile(path)
		fs.hide()

#upgrade from old version settings system
def oldVersion(set):
	buff = file(SETTINGSFILE).readlines()
	if os.path.isfile(buff[0][:-1]): 
		set.readFile(buff[0][:-1])
	if os.path.isfile(buff[1][:-1]): 
		set.settings['binary'] = buff[1][:-1]
	if os.path.isdir(buff[2]): 
		set.settings['romsDir'] = buff[2]
	
	#os.unlink(SETTINGSFILE)

	
if __name__ == "__main__":
	mySettings = Settings()
	if os.access(SETTINGSFILE,os.R_OK): oldVersion(mySettings)

	app = GUI()
	theGameList = gameList()
	
	
	gtk.main()
