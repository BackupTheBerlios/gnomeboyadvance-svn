#!/usr/bin/python
#authors cass@skynet.be, jay@socialistsoftware.com
#web http://developer.berlios.de/projects/gnomeboyadvance/
#license GPL http://www.gnu.org/copyleft/gpl.html

import os, sys, string

try:
	import pygtk
	pygtk.require('2.0')
	import gtk, gtk.glade
	import gnome, gnome.ui, gobject
except:
	print 'You must have python-gtk2, python-gnome2 and python-glade2 installed.'
	sys.exit()

NAME = 'gnomeBoyAdvance'
VERSION = '0.1'
AUTHORS = ['Jay Graves <jay@socialistsoftware.com>', 'Guillaume Desmottes <cass@skynet.be>', 'Olivier Le Thanh Duong Olivier <staz@perso.be>']
COMMENTS = 'A Gnome frontend for the Visual Boy Advance emulator'
COPYRIGHT = 'Jay Graves (c) 2003\n GnomeBoyAdvance Team (c) 2004'
DATADIR = '/usr/share/gnomeboyadvance'
SETTINGSFILE = os.path.join(os.path.expanduser("~"), ".gnomeBoyAdvance")
LOGOFILE = 'gnomeBoyAdvance.png'

SETTINGS_WIDGETS = ['romsDir', 'binary', 'scale', 'shotsDir', 'filter', 'frameSkip', 'throttle', 'yuv', 'configFile', 'saveType']

gnome.init('gnomeBoyAdvance', VERSION)
theGame = None


class Settings:
	def __init__(self): 
		self.settings = {}
	def save(self, _settings):
		self.settings = _settings
		
	def write(self):
		if os.path.isfile(self.settings['configFile']):
			theLines = file(self.settings['configFile']).readlines()

			x = 0
			for line in theLines:
				x += 1
				if line[0] == '#': continue	#skip comment
				if line[:9] == 'frameSkip':
					theLines[x - 1] = 'frameSkip     ' + self.settings['frameSkip'] + '\n'
				if line[:5] == 'video':
					if self.settings['scale'].endswith('1x'):
						theLines[x - 1] = 'video     0\n'
					if self.settings['scale'].endswith('2x'):
						theLines[x - 1] = 'video     1\n'
					if self.settings['scale'].endswith('3x'):
						theLines[x - 1] = 'video     2\n'
					if self.settings['scale'].endswith('4x'):
						theLines[x - 1] = 'video     3\n'
				if line[:10] == 'fullScreen':
					if self.settings['scale'].endswith('screen'):
						theLines[x - 1] = 'fullScreen     1\n'
					else:
						theLines[x - 1] = 'fullScreen     0\n'
				if line[:6] == 'filter':
					theLines[x - 1] = 'filter     ' + self.settings['filter'][-1:] + '\n'
				if line[:10] == 'captureDir':
					theLines[x-1] = 'captureDir=' + self.settings['shotsDir'] + '\n'
				if line[:8] == 'saveType':
					theLines[x - 1] = 'saveType     ' + self.settings['saveType'][-1:] + '\n'
				if line[:8] == 'throttle':
					theLines[x - 1] = 'throttle     ' + self.settings['throttle'] + '\n'
			file(self.settings['configFile'],'w').writelines(theLines)
			configLines = []
			configLines.append(self.settings['configFile'] + '\n')
			configLines.append(self.settings['binary'] + '\n')
			configLines.append(self.settings['romsDir'])
			file(SETTINGSFILE,'w').writelines(configLines)

			return 0
		else:
			return -1	#error
	def read(self,theFile):
		app.get_widget('configFile').set_text(self.settings['configFile'])
		app.get_widget('binary').set_text(self.settings['binary'])
		app.get_widget('romsDir').set_text(self.settings['romsDir'])
		theConfigLines = file(theFile,'r').readlines()
		
		y = 0
		for line in theConfigLines:
			y += 1
			if line[0] == '#': continue	#skip comment
			if line[:9] == 'frameSkip':
				tempStr = string.split(line)
				self.settings['frameSkip'] = tempStr[1]
				#TODO: check if atoi is necessary (idem for throttle)
				app.get_widget("frameSkip").set_value(string.atoi(self.settings['frameSkip']))
			if line[:6] == 'video ':
				tempStr = string.split(line)
				if tempStr[1] == '0':
					self.settings['scale'] = '--video-1x'
					app.get_widget("scale").set_text('--video-1x')
				if tempStr[1] == '1':
	                                self.settings['scale'] =  '--video-2x'
	                                app.get_widget("scale").set_text('--video-2x')
				if tempStr[1] == '2':
                                        self.settings['scale'] = '--video-3x'
                                        app.get_widget("scale").set_text('--video-3x')
				if tempStr[1] == '3':
                                        self.settings['scale'] = '--video-4x'
                                        app.get_widget("scale").set_text('--video-4x')
			if line[:10] == 'fullScreen':
				tempStr = string.split(line)
				if tempStr[1] == '1':
					self.settings['scale'] = '--fullscreen'
					app.get_widget("scale").set_text('--fullscreen')
			if line[:6] == 'filter':
				tempStr = string.split(line)
				if tempStr[1] == '0':
					self.settings['filter'] = '--filter-normal 0'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '1':
					self.settings['filter'] = '--filter-tv-mode 1'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '2':
					self.settings['filter'] = '--filter-2xsai 2'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '3':
					self.settings['filter'] = '--filter-super-2xsai 3'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '4':
					self.settings['filter'] = '--filter-super-eagle 4'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '5':
					self.settings['filter'] = '--filter-pixelate 5'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '6':
					self.settings['filter'] = '--filter-motion-blur 6'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '7':
					self.settings['filter'] = '--filter-advmame 7'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '8':
					self.settings['filter'] = '--filter-simple2x 8'
					app.get_widget('filter').set_text(self.settings['filter'])
				if tempStr[1] == '9':
					self.settings['filter'] = '--filter-bilinear 9'
					app.get_widget('filter').set_text(self.settings['f		ilter'])
				if tempStr[1] == 'A':
					self.settings['filter'] = '--filter-bilinear+ A'
					app.get_widget('filter').set_text(self.settings['filter'])
			if line[:10] == 'captureDir':
				self.settings['shotsDir'] = line[11:-1]
				app.get_widget('shotsDir').set_text(line[11:-1])
			if line[:8] == 'saveType':
				tempStr = string.split(line)
				if tempStr[1] == '0':
					self.settings['saveType'] = '--save-auto 0'
				if tempStr[1] == '1':
					self.settings['saveType'] = '--save-eeprom 1'
				if tempStr[1] == '2':
					self.settings['saveType'] = '--save-sram 2'
				if tempStr[1] == '3':
					self.settings['saveType'] = '--save-flash 3'
				if tempStr[1] == '4':
					self.settings['saveType'] = '--save-sensor 4'
				app.get_widget('saveType').set_text(self.settings['saveType'])
			if line[:8] == 'throttle':
				tempStr = string.split(line)
				self.settings['throttle'] = tempStr[1]
				app.get_widget('throttle').set_value(string.atoi(self.settings['throttle']))
				

class gameList:
	def __init__(self):
		self.gameList = app.get_widget("gameList")
		self.gamesDict = []
		self.gameListModel = gtk.ListStore(gobject.TYPE_STRING)
	def populate(self, romsDir):
		self.clear()
		if os.path.isdir(romsDir):
			self.gamesDict = os.listdir(romsDir)
		else:
			print romsDir + ' is not a directory.'
		self.gameCount = 0
		for eachGame in self.gamesDict:
			if eachGame[-3:] == 'zip' or eachGame[-3:] == 'gba':
				iter = self.gameListModel.append()
				self.gameListModel.set_value(iter,0,eachGame)
				self.gameCount += 1
		app.get_widget('gameCount').set_text('Total roms : ' + `self.gameCount`)
		self.gameList.set_model(self.gameListModel)
		self.selection = self.gameList.get_selection()
		self.selection.set_mode('single')
		self.col = gtk.TreeViewColumn("Game",gtk.CellRendererText(),text=0)
		self.col.set_sort_column_id(0)
		self.gameList.append_column(self.col)
		self.selection.connect('changed',self.selectGame)
	def clear(self):
		self.gameList.set_model(gtk.ListStore(gobject.TYPE_STRING))
		self.gameListModel = gtk.ListStore(gobject.TYPE_STRING)
	def selectGame(self,selection):
		self.sel = selection.get_selected()
		global theGame
		if self.sel:
			self.model, self.iter = self.sel
			self.module = self.model.get_value(self.iter, 0)
			theGame = self.model.get_value(self.iter,0)
		if mySettings.settings.has_key('shotsDir') and os.path.isdir(mySettings.settings['shotsDir']):
			theImage = os.path.join(mySettings.settings['shotsDir'], theGame[:-4] + '01.png')
			gameImage = app.get_widget("gameImage")
			if os.path.isfile(theImage):
				gameImage.set_from_file(theImage)
			else:
				gameImage.set_from_file( os.path.join(DATADIR, LOGOFILE))
			app.appBar.set_status(theGame)
		


class GUI(gtk.glade.XML):
	def __init__(self):
		#little hack usefull for the developpement
		if os.path.isfile("./gnomeboyadvance.glade"): glade_f = './gnomeboyadvance.glade'
		else: glade_f = os.path.join(DATADIR, 'gnomeboyadvance.glade')

		gtk.glade.XML.__init__(self, glade_f)
                self.signal_autoconnect(dict(GUI.__dict__))
		self.appBar = self.get_widget('appbar1')
	def on_about1_activate(*args):
		pixbuf = gtk.gdk.pixbuf_new_from_file( os.path.join(DATADIR, LOGOFILE))
	        copyright = unicode(COPYRIGHT, "latin-1").encode("utf8")
	        gnome.ui.About(NAME, str(VERSION), copyright, COMMENTS, AUTHORS,logo_pixbuf=pixbuf).show()
	def on_quit1_activate(*args):
		gtk.main_quit()

	def on_playGame_clicked(*args):
		if os.access(mySettings.settings['binary'], os.X_OK ):
			if theGame:
				launch = ""
				launch +=  mySettings.settings['binary']
				if mySettings.settings['configFile']:
					launch += ' --config=' + mySettings.settings['configFile']
				launch += ' "' + os.path.join(mySettings.settings['romsDir'],theGame) + '"'
				
				app.appBar.set_status('playing ' + theGame)
				os.system(launch)
			else : 
				app.appBar.set_status('No game selected')
		else :  # TODO: Replace that by a popup info
			app.appBar.set_status('Invalide path to VBA or not an executable, please fit it in preference')
	def on_clear_clicked(*args):
		theGameList.clear()
	def on_reload_gamelist_activate(*args):
		theGameList.populate(mySettings.settings['romsDir'])
		
	def on_preferences_activate(*args):
		app.get_widget("preferences_dialog").show()

	def on_preferences_close_button_clicked(*args):
		app.get_widget("preferences_dialog").hide()

		set = {}
		for widg in SETTINGS_WIDGETS:
			set[widg] = app.get_widget(widg).get_text()
		if set['romsDir']: theGameList.populate(set['romsDir'])
		mySettings.save(set)
		del set

		app.appBar.set_status('settings saved')

		if(mySettings.write()):
			app.appBar.set_status('Could not save settings to disk')
	
if __name__ == "__main__":
	app = GUI()
	mySettings = Settings()
	theGameList = gameList()
	mySettings.settings['configFile'] = ""
	mySettings.settings['binary'] = ""
	mySettings.settings['romsDir'] = ""
	
	if os.access(SETTINGSFILE,os.R_OK):
		gbaSetting = file(SETTINGSFILE).readlines()
		if len(gbaSetting) > 0:
			mySettings.settings['configFile'] = gbaSetting[0][:-1]
		if len(gbaSetting) > 1:
			mySettings.settings['binary'] = gbaSetting[1][:-1]
		if len(gbaSetting) > 2:
			mySettings.settings['romsDir'] = gbaSetting[2]
			theGameList.populate(mySettings.settings['romsDir'])
		
		if os.path.isfile(mySettings.settings['configFile']):
				mySettings.read(mySettings.settings['configFile'])
		else:
			print mySettings.settings['configFile'] + ' is not a file'
	else:
		print "Invalide settings file"
	
	gtk.main()
